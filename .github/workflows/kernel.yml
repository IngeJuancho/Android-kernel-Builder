name: Build kernels

on:
  push:
    paths:
      - ".github/workflows/kernel.yml"
  workflow_dispatch:
  schedule:
    - cron: "14 13 * * 5"

jobs:
  Read-configuration:
    name: üêÇ Parse *.config.json
    runs-on: ubuntu-22.04 # <-- Cambio importante
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: üòÜ Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' Kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-22.04 # <-- Cambio importante
    needs:
      - Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: ${{ matrix.CONFIG.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.CONFIG.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.CONFIG.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.CONFIG.kernelSource.device }}
      KERNEL_DEFCONFIG_PATH: ${{ matrix.CONFIG.kernelSource.defconfig }}
      ENABLE_CCACHE: ${{ matrix.CONFIG.enableCcache }}
      USE_ANYKERNEL3: ${{ matrix.CONFIG.AnyKernel3.use }}
      CONFIRM_RELEASE: ${{ matrix.CONFIG.AnyKernel3.release }}
      ENABLE_KERNELSU: ${{ matrix.CONFIG.enableKernelSU }}
      ENABLE_LXC: ${{ matrix.CONFIG.enableLXC }}
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
    steps:
      - name: üìê Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: ‚≠ê Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bc ccache curl flex git jq libelf-dev \
            libssl-dev unzip zip zlib1g-dev bison

      - name: üöÑ Setup ccache
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        id: hash
        run: |
          mkdir -p ${{ env.OUT_DIR }}
          ccache -o compression=false -o cache_dir=${{ env.CCACHE_DIR }}
          echo "HASH=$(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: üöÖ Cache ccache & output
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.OUT_DIR }}
            ${{ env.CCACHE_DIR }}
          key: cache-${{ env.KERNEL_NAME }}-${{ steps.hash.outputs.HASH }}-${{ env.BUILD_DATE }}
          restore-keys: |
            cache-${{ env.KERNEL_NAME }}-${{ steps.hash.outputs.HASH }}-

      - name: üåü Clone kernel source => (${{ env.KERNEL_REPO }})
        run: |
          git clone --depth=1 --branch ${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_REPO }} ${{ env.KERNEL_NAME }}

      - name: üí´ Get toolchains
        env:
          toolchains: "${{ toJSON(matrix.CONFIG.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          for ((i=0;i<toolchains_num;i++)); do
            toolchain=$(echo $toolchains | jq -r ".[$i]")
            toolchain_name=$(echo $toolchain | jq -r ".name")
            if echo $toolchain | jq -e 'has("url")' > /dev/null; then
              toolchain_url=$(echo $toolchain | jq -r ".url")
              mkdir -p "$toolchain_name"
              wget -q "$toolchain_url" -O toolchain.tar.gz
              tar -xzf toolchain.tar.gz -C "$toolchain_name"
              rm toolchain.tar.gz
            else
              toolchain_repo=$(echo $toolchain | jq -r ".repo")
              toolchain_branch=$(echo $toolchain | jq -r ".branch")
              git clone --depth=1 --branch $toolchain_branch $toolchain_repo $toolchain_name
            fi
            jq -r ".binaryEnv[] | tostring" <<< "$toolchain" | while read -r subPath; do
              echo "${{ env.WORKSPACE }}/$toolchain_name/$subPath" >> $GITHUB_PATH
            done
          done

      - name: üòé Set build args
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.params) }}"
          THREAD: $(nproc --all)
        run: |
          ARCH=$(echo $PARAMS | jq -r ".ARCH")
          CC=$(echo $PARAMS | jq -r ".CC")
          args="-j${{ env.THREAD }} O=${{ env.OUT_DIR }} ARCH=$ARCH"
          if [ -n "$CC" ]; then
            if [[ "$CC" == *"/"* ]]; then CC=${{ env.WORKSPACE }}/$CC; fi
            if [ ${{ env.ENABLE_CCACHE }} = true ]; then args="$args CC=\"ccache $CC\""; else args="$args CC=$CC"; fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then value="${{ env.WORKSPACE }}/$value"; fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommands | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "ARGS=$args" >> $GITHUB_OUTPUT

      - name: üòã Setup KernelSU
        if: ${{ env.ENABLE_KERNELSU == 'true' }}
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s
          echo -e "CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
      
      - name: üëç Start building the kernel
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.ARGS }}
        run: |
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=${{ github.actor }}
          make ${{ env.ARGS }} ${{ env.KERNEL_DEFCONFIG_PATH }}
          make ${{ env.ARGS }}

      - name: üíõ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Kernel
          path: ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image.gz-dtb
          if-no-files-found: ignore

      - name: ‚è∞ Pack Anykernel3
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        env:
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3
          cp -f ${{ env.OUT_DIR }}/arch/${{ steps.generate-args.outputs.ARCH }}/boot/Image.gz-dtb ./AnyKernel3/
          cd AnyKernel3/
          zip -r9 "${{ env.ANYKERNEL3_FILE }}.zip" ./*

      - name: "üíæ Upload AnyKernel3 zip"
        uses: actions/upload-artifact@v4
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        with:
          name: "${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-AnyKernel3"
          path: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}.zip"

      - name: üßß Create GitHub Release
        if: ${{ env.USE_ANYKERNEL3 == 'true' && env.CONFIRM_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.BUILD_DATE }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}.zip"
          generate_release_notes: true